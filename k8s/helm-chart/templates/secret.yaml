# NOTE: This file defines Vault secret templates and Kubernetes Secret resources
# Actual secrets are managed by HashiCorp Vault and injected by Vault Agent
# DO NOT store actual secret values in this file

{{- if not .Values.vault.enabled }}
# Fallback Kubernetes Secrets (only for development - NOT for production)
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-fallback-secrets
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: secrets-fallback
  annotations:
    # Warning annotation for fallback secrets
    security.kubernetes.io/warning: "DEVELOPMENT ONLY - Use Vault in production"
type: Opaque
data:
  # Base64 encoded placeholder values for development
  DATABASE_PASSWORD: {{ "dev-password-change-me" | b64enc | quote }}
  REDIS_PASSWORD: {{ "dev-redis-password" | b64enc | quote }}
  JWT_SECRET: {{ "dev-jwt-secret-key-change-me-in-production" | b64enc | quote }}
  API_ENCRYPTION_KEY: {{ "dev-encryption-key-32-chars-long!" | b64enc | quote }}
{{- end }}

---
# Vault Secret injection templates (Production configuration)
{{- if .Values.vault.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-vault-config
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: vault-config
  annotations:
    # Vault annotations for secret injection
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: {{ .Values.vault.role | quote }}
    vault.hashicorp.com/agent-pre-populate-only: "true"
    vault.hashicorp.com/agent-run-as-user: "1000"
    vault.hashicorp.com/agent-run-as-group: "1000"
    
    # Database secrets
    vault.hashicorp.com/agent-inject-secret-database: "{{ .Values.vault.secretPath }}/database"
    vault.hashicorp.com/agent-inject-template-database: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/database" -}}
      export DATABASE_PASSWORD="{{ .Data.data.password }}"
      export DATABASE_USERNAME="{{ .Data.data.username }}"
      export DATABASE_URL="postgresql://{{ .Data.data.username }}:{{ .Data.data.password }}@{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}"
      {{- end }}`}}
    
    # Redis secrets
    vault.hashicorp.com/agent-inject-secret-redis: "{{ .Values.vault.secretPath }}/redis"
    vault.hashicorp.com/agent-inject-template-redis: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/redis" -}}
      export REDIS_PASSWORD="{{ .Data.data.password }}"
      export REDIS_USERNAME="{{ .Data.data.username }}"
      export REDIS_URL="redis://{{ .Data.data.username }}:{{ .Data.data.password }}@{{ .Values.redis.host }}:{{ .Values.redis.port }}/{{ .Values.redis.db }}"
      {{- end }}`}}
    
    # JWT and encryption secrets
    vault.hashicorp.com/agent-inject-secret-auth: "{{ .Values.vault.secretPath }}/auth"
    vault.hashicorp.com/agent-inject-template-auth: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/auth" -}}
      export JWT_SECRET="{{ .Data.data.jwt_secret }}"
      export JWT_PRIVATE_KEY="{{ .Data.data.jwt_private_key }}"
      export JWT_PUBLIC_KEY="{{ .Data.data.jwt_public_key }}"
      export API_ENCRYPTION_KEY="{{ .Data.data.api_encryption_key }}"
      export SESSION_SECRET="{{ .Data.data.session_secret }}"
      {{- end }}`}}
    
    # Blockchain RPC secrets
    vault.hashicorp.com/agent-inject-secret-blockchain: "{{ .Values.vault.secretPath }}/blockchain"
    vault.hashicorp.com/agent-inject-template-blockchain: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/blockchain" -}}
      export ETHEREUM_RPC_URL="{{ .Data.data.ethereum_rpc_url }}"
      export ETHEREUM_RPC_API_KEY="{{ .Data.data.ethereum_rpc_api_key }}"
      export POLYGON_RPC_URL="{{ .Data.data.polygon_rpc_url }}"
      export POLYGON_RPC_API_KEY="{{ .Data.data.polygon_rpc_api_key }}"
      export ARBITRUM_RPC_URL="{{ .Data.data.arbitrum_rpc_url }}"
      export ARBITRUM_RPC_API_KEY="{{ .Data.data.arbitrum_rpc_api_key }}"
      export OPTIMISM_RPC_URL="{{ .Data.data.optimism_rpc_url }}"
      export OPTIMISM_RPC_API_KEY="{{ .Data.data.optimism_rpc_api_key }}"
      export BASE_RPC_URL="{{ .Data.data.base_rpc_url }}"
      export BASE_RPC_API_KEY="{{ .Data.data.base_rpc_api_key }}"
      {{- end }}`}}
    
    # Private keys for trading (CRITICAL SECURITY)
    vault.hashicorp.com/agent-inject-secret-trading: "{{ .Values.vault.secretPath }}/trading"
    vault.hashicorp.com/agent-inject-template-trading: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/trading" -}}
      export TRADING_PRIVATE_KEY="{{ .Data.data.trading_private_key }}"
      export FLASHLOAN_PRIVATE_KEY="{{ .Data.data.flashloan_private_key }}"
      export MEV_PROTECTION_KEY="{{ .Data.data.mev_protection_key }}"
      export FLASHBOTS_SIGNER_KEY="{{ .Data.data.flashbots_signer_key }}"
      {{- end }}`}}
    
    # External API keys
    vault.hashicorp.com/agent-inject-secret-external-apis: "{{ .Values.vault.secretPath }}/external-apis"
    vault.hashicorp.com/agent-inject-template-external-apis: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/external-apis" -}}
      export COINGECKO_API_KEY="{{ .Data.data.coingecko_api_key }}"
      export DUNE_ANALYTICS_API_KEY="{{ .Data.data.dune_analytics_api_key }}"
      export DEFILLAMA_API_KEY="{{ .Data.data.defillama_api_key }}"
      export MORALIS_API_KEY="{{ .Data.data.moralis_api_key }}"
      export ALCHEMY_API_KEY="{{ .Data.data.alchemy_api_key }}"
      export INFURA_API_KEY="{{ .Data.data.infura_api_key }}"
      {{- end }}`}}
    
    # Monitoring and alerting secrets
    vault.hashicorp.com/agent-inject-secret-monitoring: "{{ .Values.vault.secretPath }}/monitoring"
    vault.hashicorp.com/agent-inject-template-monitoring: |
      {{`{{- with secret "` + .Values.vault.secretPath + `/monitoring" -}}
      export GRAFANA_API_KEY="{{ .Data.data.grafana_api_key }}"
      export PROMETHEUS_AUTH_TOKEN="{{ .Data.data.prometheus_auth_token }}"
      export JAEGER_AUTH_TOKEN="{{ .Data.data.jaeger_auth_token }}"
      export SLACK_WEBHOOK_URL="{{ .Data.data.slack_webhook_url }}"
      export PAGERDUTY_API_KEY="{{ .Data.data.pagerduty_api_key }}"
      export DISCORD_WEBHOOK_URL="{{ .Data.data.discord_webhook_url }}"
      {{- end }}`}}

type: Opaque
data:
  # Placeholder data - actual values injected by Vault Agent
  vault-placeholder: {{ "vault-managed" | b64enc | quote }}
{{- end }}

---
# TLS certificates for secure communication
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-tls
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: tls
  annotations:
    {{- if .Values.tls.certManager.enabled }}
    # Cert-manager annotations for automatic certificate generation
    cert-manager.io/cluster-issuer: {{ .Values.tls.certManager.clusterIssuer | quote }}
    cert-manager.io/common-name: {{ .Values.tls.commonName | quote }}
    cert-manager.io/duration: {{ .Values.tls.duration | quote }}
    cert-manager.io/renew-before: {{ .Values.tls.renewBefore | quote }}
    {{- end }}
type: kubernetes.io/tls
data:
  {{- if not .Values.tls.certManager.enabled }}
  # Self-signed certificate for development (NOT for production)
  tls.crt: {{ .Values.tls.certificate | b64enc | quote }}
  tls.key: {{ .Values.tls.privateKey | b64enc | quote }}
  {{- else }}
  # Cert-manager will populate these fields automatically
  tls.crt: ""
  tls.key: ""
  {{- end }}

---
# Docker registry secrets for private image pulls
{{- if .Values.image.pullSecrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-registry
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ .Values.image.dockerConfigJson | b64enc | quote }}
{{- end }}

---
# SSH keys for Git operations (if needed)
{{- if .Values.git.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-git-ssh
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: git-ssh
  annotations:
    # SSH key rotation schedule
    security.kubernetes.io/ssh-key-rotation: "90d"
type: Opaque
data:
  ssh-privatekey: {{ .Values.git.sshPrivateKey | b64enc | quote }}
  ssh-publickey: {{ .Values.git.sshPublicKey | b64enc | quote }}
  known_hosts: {{ .Values.git.knownHosts | b64enc | quote }}
{{- end }}

---
# Service account token secret
{{- if .Values.serviceAccount.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-token
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: service-account
  annotations:
    kubernetes.io/service-account.name: {{ include "arbitragex-supreme.serviceAccountName" . }}
type: kubernetes.io/service-account-token
{{- end }}

---
# Webhook secrets for GitHub/GitLab integration
{{- if .Values.webhooks.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}-webhooks
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    component: webhooks
type: Opaque
data:
  github-webhook-secret: {{ .Values.webhooks.githubSecret | b64enc | quote }}
  gitlab-webhook-secret: {{ .Values.webhooks.gitlabSecret | b64enc | quote }}
  slack-webhook-url: {{ .Values.webhooks.slackWebhookUrl | b64enc | quote }}
{{- end }}