# ArbitrageX Supreme - Kubernetes Deployment
# Ingenio Pichichi S.A. - Deployment template empresarial
# TODO FUNCIONAL - Despliegue real en Kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "arbitragex-supreme.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "arbitragex-supreme.labels" . | nindent 4 }}
    app.kubernetes.io/component: main
  annotations:
    deployment.kubernetes.io/revision: "{{ .Release.Revision }}"
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  
  strategy:
    type: {{ .Values.deployment.strategy.type }}
    {{- if eq .Values.deployment.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.deployment.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.deployment.strategy.rollingUpdate.maxSurge }}
    {{- end }}
  
  selector:
    matchLabels:
      {{- include "arbitragex-supreme.selectorLabels" . | nindent 6 }}
  
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        prometheus.io/scrape: "{{ .Values.monitoring.enabled }}"
        prometheus.io/port: "{{ .Values.monitoring.metrics.port }}"
        prometheus.io/path: "{{ .Values.monitoring.metrics.path }}"
      labels:
        {{- include "arbitragex-supreme.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: main
        version: {{ .Values.image.tag | quote }}
    
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      serviceAccountName: {{ include "arbitragex-supreme.serviceAccountName" . }}
      
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Initialization containers
      initContainers:
        {{- if .Values.postgresql.enabled }}
        # Wait for PostgreSQL
        - name: wait-for-postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h {{ include "postgresql.primary.fullname" .Subcharts.postgresql }} -p 5432; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGUSER
              value: {{ .Values.postgresql.auth.username | quote }}
        {{- end }}
        
        {{- if .Values.redis.enabled }}
        # Wait for Redis
        - name: wait-for-redis
          image: redis:7-alpine
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              echo "Waiting for Redis to be ready..."
              until redis-cli -h {{ include "common.names.fullname" .Subcharts.redis }}-master ping; do
                echo "Redis is unavailable - sleeping"
                sleep 2
              done
              echo "Redis is ready!"
        {{- end }}
        
        {{- if .Values.vault.enabled }}
        # Vault authentication and secret fetching
        - name: vault-init
          image: vault:1.15.2
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              echo "Initializing Vault authentication..."
              
              # Authenticate with Vault using Kubernetes auth
              export VAULT_ADDR="{{ .Values.vault.address }}"
              
              # Get service account token
              KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              
              # Login to Vault
              vault write auth/kubernetes/login \
                role={{ .Values.vault.role }} \
                jwt="$KUBE_TOKEN" > /tmp/vault-response
              
              # Extract token
              VAULT_TOKEN=$(cat /tmp/vault-response | grep -o '"client_token":"[^"]*' | cut -d'"' -f4)
              
              echo "Vault authentication successful"
              echo "$VAULT_TOKEN" > /shared/vault-token
          volumeMounts:
            - name: shared-data
              mountPath: /shared
          env:
            - name: VAULT_SKIP_VERIFY
              value: "true"
        {{- end }}
      
      containers:
        {{- if .Values.vault.enabled }}
        # Vault Agent sidecar for secret injection
        - name: vault-agent
          image: {{ .Values.vault.agent.image.repository }}:{{ .Values.vault.agent.image.tag }}
          imagePullPolicy: IfNotPresent
          args:
            - "vault"
            - "agent"
            - "-config=/vault/config/agent.hcl"
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
            - name: vault-secrets
              mountPath: /vault/secrets
            - name: shared-data
              mountPath: /shared
          env:
            - name: VAULT_ADDR
              value: {{ .Values.vault.address | quote }}
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
        {{- end }}
        
        # Main application container
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            {{- if .Values.monitoring.enabled }}
            - name: metrics
              containerPort: {{ .Values.monitoring.metrics.port }}
              protocol: TCP
            {{- end }}
          
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            
            # Dynamic environment variables
            - name: ENVIRONMENT
              value: {{ .Values.environment | quote }}
            - name: RELEASE_NAME
              value: {{ .Release.Name | quote }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            
            # Database configuration
            {{- if .Values.postgresql.enabled }}
            - name: DATABASE_HOST
              value: {{ include "postgresql.primary.fullname" .Subcharts.postgresql | quote }}
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: {{ .Values.postgresql.auth.database | quote }}
            - name: DATABASE_USER
              value: {{ .Values.postgresql.auth.username | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.secretName" .Subcharts.postgresql }}
                  key: password
            {{- end }}
            
            # Redis configuration
            {{- if .Values.redis.enabled }}
            - name: REDIS_HOST
              value: {{ include "common.names.fullname" .Subcharts.redis }}-master
            - name: REDIS_PORT
              value: "6379"
            {{- if .Values.redis.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" .Subcharts.redis }}
                  key: redis-password
            {{- end }}
            {{- end }}
          
          {{- if .Values.envFrom }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          {{- end }}
          
          volumeMounts:
            # Temporary directories
            - name: tmp
              mountPath: /tmp
            - name: var-cache
              mountPath: /var/cache
            
            {{- if .Values.vault.enabled }}
            # Vault secrets
            - name: vault-secrets
              mountPath: /vault/secrets
              readOnly: true
            {{- end }}
            
            # Application logs
            - name: logs
              mountPath: /app/logs
            
            # Cache directory
            - name: cache
              mountPath: /app/cache
          
          # Health checks
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          
          {{- if .Values.healthCheck.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: {{ .Values.healthCheck.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      
      # Volumes
      volumes:
        # Temporary directories (security best practice)
        - name: tmp
          emptyDir: {}
        - name: var-cache
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: cache
          emptyDir: {}
        
        {{- if .Values.vault.enabled }}
        # Vault configuration and secrets
        - name: vault-config
          configMap:
            name: {{ include "arbitragex-supreme.fullname" . }}-vault-config
        - name: vault-secrets
          emptyDir:
            medium: Memory
        - name: shared-data
          emptyDir:
            medium: Memory
        {{- end }}
      
      # Restart policy
      restartPolicy: Always
      
      # DNS policy for service discovery
      dnsPolicy: ClusterFirst
      
      # Termination grace period
      terminationGracePeriodSeconds: 60
      
      # Security settings
      automountServiceAccountToken: true
      
      # Priority class for pod scheduling
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}