'use client'

import React, { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { cn } from '@/lib/utils'
import { 
  LayoutDashboard,
  TrendingUp,
  Settings,
  Network,
  Activity,
  PieChart,
  Wallet,
  History,
  Bell,
  HelpCircle,
  ChevronLeft,
  ChevronRight,
  LogOut,
  User
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { useSidebarBadges } from '@/hooks/useSidebarBadges'

interface SidebarProps {
  className?: string
  isCollapsed?: boolean
  onToggle?: () => void
}

// Función para crear elementos del menú con badges dinámicos - iOS Montserrat Style
const createMenuItems = (badges: { opportunities: number; wallets: number; alerts: number }) => [
  {
    title: 'DASHBOARD',
    icon: LayoutDashboard,
    href: '/',
    active: true,
    badge: null
  },
  {
    title: 'OPORTUNIDADES',
    icon: TrendingUp,
    href: '/opportunities',
    active: false,
    badge: badges.opportunities > 0 ? badges.opportunities.toString() : null
  },
  {
    title: 'PORTFOLIO',
    icon: PieChart,
    href: '/portfolio',
    active: false,
    badge: null
  },
  {
    title: 'TRANSACCIONES',
    icon: History,
    href: '/transactions',
    active: false,
    badge: null
  },
  {
    title: 'BILLETERAS',
    icon: Wallet,
    href: '/wallets',
    active: false,
    badge: badges.wallets > 0 ? badges.wallets.toString() : null
  },
  {
    title: 'REDES',
    icon: Network,
    href: '/networks',
    active: false,
    badge: null
  },
  {
    title: 'ALERTAS',
    icon: Bell,
    href: '/alerts',
    active: false,
    badge: badges.alerts > 0 ? badges.alerts.toString() : null
  },
  {
    title: 'CONFIGURACIÓN',
    icon: Settings,
    href: '/settings',
    active: false,
    badge: null
  }
]

const bottomMenuItems = [
  {
    title: 'AYUDA',
    icon: HelpCircle,
    href: '/help',
    active: false
  },
  {
    title: 'PERFIL',
    icon: User,
    href: '/profile',
    active: false
  }
]

export function Sidebar({ className, isCollapsed = false, onToggle }: SidebarProps) {
  const [collapsed, setCollapsed] = useState(isCollapsed)
  const pathname = usePathname()
  
  // Obtener badges dinámicos - EXCLUSIVO para sidebar, sin interferir con paginación
  const { badges, isLoading, error } = useSidebarBadges()
  
  // Crear elementos del menú con badges dinámicos (TOTAL ABSOLUTO)
  const menuItems = createMenuItems(badges)

  const handleToggle = () => {
    setCollapsed(!collapsed)
    onToggle?.()
  }

  return (
    <aside className={cn(
      "w-64 bg-gradient-to-l from-blue-400 via-blue-600 to-blue-800 text-white flex flex-col p-4",
      collapsed && "w-16 px-2",
      className
    )}>
      {/* Header */}
      <div className={cn(
        "text-2xl mb-10 font-semibold",
        collapsed && "text-lg mb-6 text-center"
      )}>
        {collapsed ? "AX" : "ArbitrageX"}
      </div>

      {/* Navigation */}
      <nav className="flex flex-col gap-4 flex-1">
        {menuItems.map((item) => {
          const Icon = item.icon
          const isActive = pathname === item.href
          return (
            <Link key={item.href} href={item.href} className={cn(
              "flex items-center gap-3 rounded-xl p-2 transition duration-300 hover:bg-white/10 hover:pl-4",
              collapsed && "justify-center p-3",
              isActive && "bg-white/20"
            )}>
              <Icon size={20} />
              {!collapsed && (
                <>
                  <span className="flex-1">{item.title}</span>
                  {item.badge && (
                    <Badge 
                      variant="secondary" 
                      className={cn(
                        "ml-auto text-white bg-white/20 hover:bg-white/30",
                        isLoading ? "animate-pulse" : "",
                        error && "bg-red-500/50"
                      )}
                    >
                      {isLoading ? "..." : item.badge}
                    </Badge>
                  )}
                </>
              )}
            </Link>
          )
        })}
      </nav>

      {/* Bottom Menu */}
      <div className="mt-auto">
        {bottomMenuItems.map((item) => {
          const Icon = item.icon
          return (
            <Link key={item.href} href={item.href} className={cn(
              "flex items-center gap-3 rounded-xl p-2 transition duration-300 hover:bg-white/10 hover:pl-4",
              collapsed && "justify-center p-3"
            )}>
              <Icon size={20} />
              {!collapsed && <span>{item.title}</span>}
            </Link>
          )
        })}
        
        <Link href="/logout" className={cn(
          "flex items-center gap-3 rounded-xl p-2 transition duration-300 hover:bg-red-500/20 hover:pl-4 text-red-300",
          collapsed && "justify-center p-3"
        )}>
          <LogOut size={20} />
          {!collapsed && <span>Cerrar Sesión</span>}
        </Link>
      </div>
    </aside>
  )
}